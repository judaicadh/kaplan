---import BaseLayout from '../../layouts/BaseLayout.astro'import Clover from '../../components/IIIF/Clover'import items from '../../data/items.json'import { slugify } from '../../utils/slugify.js'import BackToSearch from "../../components/Misc/BackToSearch";import { getSchemaType } from '../../types/schema.ts'import FavoritesButton from '../../components/Misc/FavoritesButton'export const prerender = true;/* 1) Helpers FIRST (so they exist when getStaticPaths runs) */const toSlug = (it) => slugify(it?.slug ? String(it.slug) : String(it.title ?? ''));const normalizeSlug = (s) => String(s)	.replace(/-\d+-of-\d+$/i, '')	.replace(/-p\d+$/i, '')	.replace(/-part-\d+$/i, '');/* 2) getStaticPaths AFTER helpers */export async function getStaticPaths() {	return items		.map((it) => {			const s = toSlug(it);			return s ? { params: { slug: s } } : null;		})		.filter(Boolean);}/* 3) Page state */const rawSlug = Astro.params.slug;const slug = normalizeSlug(rawSlug);const itemData = items.find((it) => toSlug(it) === slug);const notFound = !itemData;const arr = (v) => Array.isArray(v) ? v : (v == null ? [] : [v]);const manifestUrls = notFound ? [] : arr(itemData.manifestUrl).filter(Boolean);const subjectLinks = notFound ? [] :	arr(itemData.subjectAI).map(s => (typeof s === 'string' ? { name: s } : s))		.filter(s => s && s.name)		.map(s => ({ name: s.name, slug: slugify(s.name) }));const geoLinks = notFound ? [] :	arr(itemData.geography).map(g => (typeof g === 'string' ? { name: g } : g))		.filter(g => g && g.name)		.map(g => ({ name: g.name, slug: slugify(g.name) }));const uniqueNames = notFound ? [] : [...new Set(	[...arr(itemData.name), ...arr(itemData.personAI)]		.filter(Boolean)		.flatMap(n => String(n).split('|'))		.map(n => n.trim())		.filter(Boolean))];const jsonLdData = notFound ? null : {	'@context': 'https://schema.org',	'@type': getSchemaType(itemData.type || 'CreativeWork'),	name: itemData.title,	description: itemData.description || 'No description available.',	url: `https://kaplancollection.org/item/${slug}`,	thumbnailUrl: itemData.thumbnail || '',	author: itemData.personAI || itemData.name || itemData.people || '',	spatialCoverage: geoLinks.map((geo) => ({		'@type': 'Place',		name: geo.name,		url: `https://kaplancollection.org/geography/${geo.slug}`	})),	keywords: subjectLinks.map((subject) => subject.name),	inLanguage: itemData.language || 'en'};---<BaseLayout title={itemData?.title || "Not found"} description={itemData?.description || ""}>	<Fragment slot="headContent">		{jsonLdData && (			<script type="application/ld+json">        { JSON.stringify(jsonLdData) }      </script>		)}		<!-- Minimal safe metas -->		<meta property="og:title" content={itemData?.title || "Not found"} />		<meta property="og:description" content={itemData?.description || ""} />		<meta property="og:image" content={itemData?.thumbnail || "/default-thumbnail.jpg"} />		<meta property="og:url" content={`https://kaplancollection.org/item/${slug}`} />		</Fragment>		<section class="py-8 bg-white md:py-16 dark:bg-gray-900 antialiased">			<div class="max-w-screen-xl px-4 mx-auto 2xl:px-0">				<BackToSearch client:only="react" />				{notFound ? (					<div class="prose dark:prose-invert">						<h1>Item not found</h1>						<p>We couldn’t find an item for <code>{rawSlug}</code>.</p>					</div>				) : (					<>						<nav aria-label="Breadcrumb" class="text-sm text-gray-600 dark:text-gray-400 mb-4">							<ol class="flex items-center space-x-2">								<li><a href="/" class="hover:underline dark:text-blue-400" aria-label="Home">Home</a></li>								<li aria-hidden="true">›</li>								<li><a href="/search" class="hover:underline dark:text-blue-400" aria-label="Search Results">Search</a></li>								<li aria-hidden="true">›</li>								<li class="text-gray-700 dark:text-gray-300" aria-current="page">{itemData.title}</li>							</ol>						</nav>						<div class="lg:grid lg:grid-cols-2 lg:gap-8 xl:gap-16">							<!-- IIIF Viewer Section -->							<div class="w-full mx-auto">								{manifestUrls.length ? (									<Clover client:only="react" manifestUrls={manifestUrls} />								) : (									<div class="text-sm text-gray-500 dark:text-gray-400">No IIIF manifest available.</div>								)}							</div>							<div>								<!-- Alert Section -->								<div id="alert-border-1"										 class="flex items-center p-4 mb-4 border-t-4 text-blue-800 bg-blue-50 border-blue-300 dark:text-blue-400 dark:bg-gray-800 dark:border-blue-800"										 role="alert" aria-live="polite">									<svg class="flex-shrink-0 w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20"><path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z"/></svg>									<div class="ml-3 text-sm font-medium">										Some of the content on this page was edited by or generated with AI.										<a href="/about/ai" class="font-semibold underline hover:no-underline">Learn More</a>.										See an error?										<a href="#" class="font-semibold underline hover:no-underline"											 onclick="this.href='mailto:judaicadh@gmail.com?subject=' + encodeURIComponent('Inquiry from Your Website') + '&body=' + encodeURIComponent('I would like to report an error on this page: ' + window.location.href)">											Email Us										</a>									</div>								</div>								<!-- Content Section -->								<h1 class="text-2xl font-bold text-gray-900 sm:text-3xl dark:text-white">									{itemData.title}									<FavoritesButton										client:only="react"										objectID={itemData.id || itemData.slug}										title={itemData.title}										slug={slug}										thumbnail={itemData.thumbnail || '/default-thumbnail.jpg'}									/>								</h1>								<hr class="my-6 border-gray-200 dark:border-gray-800" />								<p class="text-lg text-gray-700 dark:text-gray-300">{itemData.description || 'No description available.'}</p>								<hr class="my-6 border-gray-200 dark:border-gray-800" />								<h2 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4">Associated People/Businesses</h2>								<ul class="list-disc ml-6 text-gray-700 dark:text-gray-300">									{uniqueNames.length > 0 ? (										uniqueNames.map((name) => <li>{name}</li>)									) : (										<li>No associated people or businesses listed.</li>									)}								</ul>								<hr class="my-6 border-gray-200 dark:border-gray-800" />								<h2 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4">Geography</h2>								{geoLinks.length > 0 ? (									<ul class="list-disc ml-6 text-gray-700 dark:text-gray-300">										{geoLinks.map(({ name, slug }) => (											<li key={slug}>												<a href={`/geography/${slug}`} class="text-blue-600 hover:underline dark:text-blue-400">													{name}												</a>											</li>										))}									</ul>								) : (									<p class="text-gray-600 dark:text-gray-400">No geographic information available.</p>								)}								<hr class="my-6 border-gray-200 dark:border-gray-800" />								<h2 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4">Subjects</h2>								{subjectLinks.length > 0 ? (									<ul class="list-disc ml-6">										{subjectLinks.map(({ name, slug }) => (											<li key={slug}>												<a href={`/subject/${slug}`} class="text-blue-600 hover:underline" aria-label={`View subject ${name}`}>													{name}												</a>											</li>										))}									</ul>								) : (									<p class="text-gray-600 dark:text-gray-400">No subjects available.</p>								)}								<hr class="my-6 border-gray-200 dark:border-gray-800" />								<h2 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4">Physical Location</h2>								<p class="text-gray-600 dark:text-gray-400">{itemData.PhysicalLocation || ""}</p>							</div>						</div>					</>				)}			</div>		</section></BaseLayout>