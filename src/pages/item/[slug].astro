---import BaseLayout from '../../layouts/BaseLayout.astro'import Clover from '../../components/IIIF/Clover'import items from '../../data/items.json'import { slugify } from '../../utils/slugify.js'import { Schema } from 'astro-seo-schema'import { getSchemaType } from '../../types/schema.ts'import ActionBar from '../../components/Search/ItemPage'import Favorites from '../favorites.astro'import FavoritesButton from '../../components/Misc/FavoritesButton'// Generate dynamic paths using slugs// Generate dynamic paths using slugsexport async function getStaticPaths() {	const paths = items		.map((item) => {			const slug = item.slug || slugify(item.title)			return slug ? { params: { slug } } : null		})		.filter(Boolean)	return paths}const { slug } = Astro.params// Find the item with the matching slugconst itemData = items.find((item) => item.slug === slug || slugify(item.slug) === slug)if (!itemData) {	throw new Error(`Item with slug ${slug} not found.`)}const peopleAIs = Array.isArray(itemData.personAI) ? itemData.personAI : [itemData.personAI]const manifestUrls = Array.isArray(itemData.manifestUrl) ? itemData.manifestUrl : [itemData.manifestUrl]/*const peopleLinks = (itemData.name || []).map(people => ({	name: people.name,	slug: slugify(people.name)}))*/// Function to slugify URIconst subjectLinks = (itemData.subjectAI || []).map(subject => ({	name: subject.name,	slug: slugify(subject.name)}))// Generate links for geographic and subject informationconst geoLinks = (itemData.geography || []).map((geo) => ({	name: geo.name,	slug: slugify(geo.name)}))// Generate JSON-LD structured data// Function to get Schema.org type based on categoryconst jsonLdData = {	'@context': 'https://schema.org',	'@type': getSchemaType(itemData.type || 'CreativeWork'),	name: itemData.title,	description: itemData.description || 'No description available.',	url: `https://kaplancollection.org/item/${slug}`,	thumbnailUrl: itemData.thumbnail || '',	author: itemData.peopleAI || itemData.name || itemData.people || '',	spatialCoverage: geoLinks.map((geo) => ({		'@type': 'Place',		name: geo.name,		url: `https://kaplancollection.org/geography/${geo.slug}`	})),	keywords: subjectLinks.map((subject) => subject.name),	inLanguage: itemData.language || 'en'}---<head name="schema">	<Schema		item={{ jsonLdData }} /></head><BaseLayout title={itemData.title || 'Untitled'}>	<section class="py-8 bg-white md:py-16 dark:bg-gray-900 antialiased">		<div class="max-w-screen-xl px-4 mx-auto 2xl:px-0">			<div class="lg:grid lg:grid-cols-2 lg:gap-8 xl:gap-16">				<!-- IIIF Viewer Section -->				<div class="w-full mx-auto">					<Clover client:only="react" manifestUrls={manifestUrls} />				</div>				<div>					<!-- Alert Section -->					<div id="alert-border-1"							 class="flex items-center p-4 mb-4 border-t-4 text-blue-800 bg-blue-50 border-blue-300 dark:text-blue-400 dark:bg-gray-800 dark:border-blue-800"							 role="alert" aria-live="polite">						<svg class="flex-shrink-0 w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor"								 viewBox="0 0 20 20">							<path								d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />						</svg>						<div class="ml-3 text-sm font-medium">							Some of the content on this page was edited by or generated with AI.							<a href="/about#faq" class="font-semibold underline hover:no-underline">Learn More</a>.							See an error?							<a href="#" class="font-semibold underline hover:no-underline"								 onclick="this.href='mailto:judaicadh@gmail.com?subject=' + encodeURIComponent('Inquiry from Your Website') + '&body=' + encodeURIComponent('I would like to report an error on this page: ' + window.location.href)">								Email Us							</a>						</div>						<button type="button"										class="ml-auto -mx-1.5 -my-1.5 bg-blue-50 text-blue-500 rounded-lg focus:ring-2 focus:ring-blue-400 p-1.5 hover:bg-blue-200 inline-flex items-center justify-center h-8 w-8 dark:bg-gray-800 dark:text-blue-400 dark:hover:bg-gray-700"										aria-label="Close alert">							<span class="sr-only">Dismiss</span>							<svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"									 viewBox="0 0 14 14">								<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"											d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />							</svg>						</button>					</div>					<!-- Content Section -->					<h1 class="text-2xl font-bold text-gray-900 sm:text-3xl dark:text-white">{itemData.title}</h1>					<hr class="my-6 border-gray-200 dark:border-gray-800" />					<p class="text-lg text-gray-700 dark:text-gray-300">{itemData.description || 'No description available.'}</p>					<hr class="my-6 border-gray-200 dark:border-gray-800" />					<h2 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4">Associated People/Businesses</h2>					<ul class="list-disc ml-6 text-gray-700 dark:text-gray-300">						<li>{itemData.peopleAI || itemData.name || itemData.people || ''}</li>					</ul>					<hr class="my-6 border-gray-200 dark:border-gray-800" />					<h2 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4">Geography</h2>					{geoLinks.length > 0 ? (						<ul class="list-disc ml-6 text-gray-700 dark:text-gray-300">							{geoLinks.map(({ name, slug }) => (								<li key={slug}>									<a href={`/geography/${slug}`} class="text-blue-600 hover:underline dark:text-blue-400">										{name}									</a>								</li>							))}						</ul>					) : (						<p class="text-gray-600 dark:text-gray-400">No geographic information available.</p>					)}				</div>			</div>		</div>	</section></BaseLayout>