---import BaseLayout from '../../layouts/BaseLayout.astro'import Clover from '../../components/IIIF/Clover'import items from '../../data/items.json'import { slugify } from '../../utils/slugify.js'import BackToSearch from "../../components/Misc/BackToSearch";import FavoritesButton from '../../components/Misc/FavoritesButton'import { getSchemaType } from '../../types/schema.ts'export const prerender = true;export async function getStaticPaths() {	const paths = items		.map((item) => {			const slug = item.slug || slugify(item.title);			return slug ? { params: { slug } } : null;		})		.filter(Boolean);	return paths;}const toArray = (v) => (Array.isArray(v) ? v : v ? [v] : []);const normalizeNames = (...fields) =>	[...new Set(		fields			.flatMap(toArray)			.filter(Boolean)			.flatMap((n) => String(n).split("|").map(s => s.trim()))			.filter(Boolean)	)];const makeLinks = (arr = []) =>	toArray(arr)		.filter(Boolean)		.map((x) => (typeof x === 'string' ? { name: x } : x))		.filter((x) => x?.name)		.map(({ name }) => ({ name, slug: slugify(name) }));const { slug } = Astro.params;// Find itemconst itemData = items.find((item) => (item.slug || slugify(item.title)) === slug);if (!itemData) {	return new Response('Not Found', { status: 404 });}const manifestUrls = toArray(itemData.manifestUrl).filter(Boolean);// Namesconst uniqueNames = normalizeNames(itemData.name, itemData.peopleAI, itemData.personAI, itemData.people);// Subjects & Geographyconst subjectLinks = makeLinks(itemData.subjectAI);const geoLinks = makeLinks(itemData.geography);// Canonical host (pick one)const CANON = 'https://www.kaplancollection.org'; // ← match your real canonicalconst websiteId = `${CANON}#website`;const orgId = `${CANON}#org`;const itemId = `${CANON}/item/${slug}#item`;const itemUrl = `${CANON}/item/${slug}`;// helper so geography can be string or {name, uri}const getGeoName = (g) => (typeof g === 'string' ? g : g?.name);const getGeoUri  = (g) => (typeof g === 'object' ? g?.uri : undefined);// Build linked Place nodes (and @ids) onceconst placeNodes = (itemData.geography || [])	.map((g) => {		const name = getGeoName(g);		if (!name) return null;		const s = slugify(name);		return {			'@type': 'Place',			'@id': `${CANON}/geography/${s}#place`,			name,			url: `${CANON}/geography/${s}`,			...(getGeoUri(g) ? { sameAs: getGeoUri(g) } : {})		};	})	.filter(Boolean);// JSON-LD for the itemconst jsonLdData = {	'@context': 'https://schema.org',	'@type': getSchemaType(itemData.type || 'CreativeWork'),	'@id': itemId,	'name': itemData.title,	'description': itemData.description || 'No description available.',	'url': itemUrl,	'mainEntityOfPage': itemUrl,	'isPartOf': { '@id': websiteId },	'publisher': { '@id': orgId },	// prefer `image` (array allowed)	'image': itemData.thumbnail ? [itemData.thumbnail] : undefined,	// authors can be plain strings or Person/Organization; strings are fine	'author': uniqueNames,	// link to Place nodes by @id (and include the nodes in @graph)	'spatialCoverage': placeNodes.map(p => ({ '@id': p['@id'] })),	'keywords': subjectLinks.map((s) => s.name),	'inLanguage': itemData.language || 'en',	'@graph': placeNodes // include the Place definitions so the @ids resolve};---<BaseLayout title={itemData.title || "Untitled"} description={itemData.description || ""} ogImage={itemData.thumbnail}>	<Fragment slot="headContent">		<script type="application/ld+json" is:inline>			{JSON.stringify(jsonLdData)}		</script>	</Fragment>	<section class="py-8 bg-white md:py-16 dark:bg-gray-900 antialiased">		<div class="max-w-screen-xl px-4 mx-auto 2xl:px-0">			<BackToSearch client:only="react" />			<nav aria-label="Breadcrumb" class="text-sm text-gray-600 dark:text-gray-400 mb-4">				<ol class="flex items-center gap-2">					<li><a href="/" class="hover:underline focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 dark:text-blue-400">Home</a></li>					<li aria-hidden="true">›</li>					<li><a href="/search" class="hover:underline focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 dark:text-blue-400">Search</a></li>					<li aria-hidden="true">›</li>					<li class="text-gray-700 dark:text-gray-300" aria-current="page">{itemData.title}</li>				</ol>			</nav>			<div class="lg:grid lg:grid-cols-2 lg:gap-8 xl:gap-16">				<!-- IIIF Viewer -->				<div class="w-full mx-auto">					<Clover client:only="react" manifestUrls={manifestUrls} />				</div>				<div>					<!-- Info alert -->					<div						id="alert-border-1"						class="flex items-start gap-3 p-4 mb-4 border-t-4 text-blue-800 bg-blue-50 border-blue-300 dark:text-blue-400 dark:bg-gray-800 dark:border-blue-800"						role="status" aria-live="polite"					>						<svg class="w-4 h-4 mt-1 flex-shrink-0" aria-hidden="true" viewBox="0 0 20 20" fill="currentColor">							<path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z"/>						</svg>						<div class="text-sm">							Some of the content on this page was edited by or generated with AI.							<a href="/about/ai" class="font-semibold underline hover:no-underline">Learn more</a>.							See an error?							<a								href="#"								class="font-semibold underline hover:no-underline"								onclick="this.href='mailto:judaicadh@gmail.com?subject=' + encodeURIComponent('Error report') + '&body=' + encodeURIComponent('Page: ' + window.location.href)"							>Email us</a>.						</div>						<button							type="button"							class="ml-auto -mx-1.5 -my-1.5 rounded-lg focus:ring-2 focus:ring-blue-400 p-1.5 h-8 w-8 text-blue-600 hover:bg-blue-100 dark:text-blue-300 dark:hover:bg-gray-700"							aria-label="Dismiss"							onclick="this.closest('#alert-border-1')?.remove()"						>							<span class="sr-only">Dismiss</span>✕						</button>					</div>					<!-- Title + Favorite -->					<h1 class="text-2xl font-bold text-gray-900 sm:text-3xl dark:text-white flex items-center gap-2">						{itemData.title}						<FavoritesButton							client:only="react"							objectID={itemData.objectID || itemData.slug || slug}							title={itemData.title}							slug={slug}							thumbnail={itemData.thumbnail || '/default-thumbnail.jpg'}						/>					</h1>					<hr class="my-6 border-gray-200 dark:border-gray-800" />					<!-- Description -->					<p class="text-lg text-gray-700 dark:text-gray-300">{itemData.description || 'No description available.'}</p>					<hr class="my-6 border-gray-200 dark:border-gray-800" />					<!-- People -->					<h2 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4">Associated People/Businesses</h2>					{uniqueNames.length						? <ul class="list-disc ml-6 text-gray-700 dark:text-gray-300">							{uniqueNames.map((name) => <li key={name}>{name}</li>)}						</ul>						: <p class="text-gray-600 dark:text-gray-400">No associated people or businesses listed.</p>					}					<hr class="my-6 border-gray-200 dark:border-gray-800" />					<!-- Geography -->					<h2 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4">Geography</h2>					{geoLinks.length						? <ul class="list-disc ml-6 text-gray-700 dark:text-gray-300">							{geoLinks.map(({ name, slug }) => (								<li key={slug}><a href={`/geography/${slug}`} class="text-blue-600 hover:underline dark:text-blue-400">{name}</a></li>							))}						</ul>						: <p class="text-gray-600 dark:text-gray-400">No geographic information available.</p>					}					<hr class="my-6 border-gray-200 dark:border-gray-800" />					<!-- Subjects -->					<h2 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4">Subjects</h2>					{subjectLinks.length						? <ul class="list-disc ml-6">							{subjectLinks.map(({ name, slug }) => (								<li key={slug}><a href={`/subject/${slug}`} class="text-blue-600 hover:underline" aria-label={`View subject ${name}`}>{name}</a></li>							))}						</ul>						: <p class="text-gray-600 dark:text-gray-400">No subjects available.</p>					}					<hr class="my-6 border-gray-200 dark:border-gray-800" />					<!-- Physical Location -->					<h2 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4">Physical Location</h2>					<p class="text-gray-600 dark:text-gray-400">{itemData.PhysicalLocation || ""}</p>				</div>			</div>		</div>	</section></BaseLayout>