---import BaseLayout from '../../layouts/BaseLayout.astro'import Clover from '../../components/IIIF/Clover'import items from '../../data/items.json'import { slugify } from '../../utils/slugify.js'import { Schema } from 'astro-seo-schema'import { getSchemaType } from '../../types/schema.ts'import ActionBar from '../../components/Search/ItemPage'import Favorites from '../favorites.astro'import FavoritesButton from '../../components/Misc/FavoritesButton'// Generate dynamic paths using slugs// Generate dynamic paths using slugsexport async function getStaticPaths() {	const paths = items		.map((item) => {			const slug = item.slug || slugify(item.title)			return slug ? { params: { slug } } : null		})		.filter(Boolean)	return paths}const { slug } = Astro.params// Find the item with the matching slugconst itemData = items.find((item) => item.slug === slug || slugify(item.slug) === slug)if (!itemData) {	throw new Error(`Item with slug ${slug} not found.`)}const peopleAIs = Array.isArray(itemData.personAI) ? itemData.personAI : [itemData.personAI]const manifestUrls = Array.isArray(itemData.manifestUrl) ? itemData.manifestUrl : [itemData.manifestUrl]/*const peopleLinks = (itemData.name || []).map(people => ({	name: people.name,	slug: slugify(people.name)}))*/// Function to slugify URIconst subjectLinks = (itemData.subjectAI || []).map(subject => ({	name: subject.name,	slug: slugify(subject.name)}))// Generate links for geographic and subject informationconst geoLinks = (itemData.geography || []).map((geo) => ({	name: geo.name,	slug: slugify(geo.name)}))// Generate JSON-LD structured data// Function to get Schema.org type based on categoryconst jsonLdData = {	'@context': 'https://schema.org',	'@type': getSchemaType(itemData.type || 'CreativeWork'),	name: itemData.title,	description: itemData.description || 'No description available.',	url: `https://kaplancollection.org/item/${slug}`,	thumbnailUrl: itemData.thumbnail || '',	author: itemData.peopleAI || itemData.name || itemData.people || '',	spatialCoverage: geoLinks.map((geo) => ({		'@type': 'Place',		name: geo.name,		url: `https://kaplancollection.org/geography/${geo.slug}`	})),	keywords: subjectLinks.map((subject) => subject.name),	inLanguage: itemData.language || 'en'}---<head name="schema">	<Schema		item={{ jsonLdData }} /></head><BaseLayout title={itemData.title || 'Untitled'}>	<section class="py-8 bg-white md:py-16 dark:bg-gray-900 antialiased">		<div class="max-w-screen-xl px-4 mx-auto 2xl:px-0">			<div class="lg:grid lg:grid-cols-2 lg:gap-8 xl:gap-16">				<!-- IIIF Viewer Section -->				<div class="w-full mx-auto">					<Clover client:only="react" manifestUrls={manifestUrls} />				</div>				<!-- Item Details Section -->				<div class="mt-6 sm:mt-8 lg:mt-0">					<div class="justify-self-end">						<FavoritesButton							client:only="react"							objectID={itemData.id}							title={itemData.title}							slug={slug}							thumbnail={itemData.thumbnail || ''}						/>					</div>					<h1 class="text-2xl font-bold text-gray-900 sm:text-3xl dark:text-white">						{itemData.title}					</h1>					<hr class="my-6 border-gray-200 dark:border-gray-800" />					<p class="text-lg text-gray-700 dark:text-gray-300">{itemData.description || 'No description available.'}</p>					<hr class="my-6 border-gray-200 dark:border-gray-800" />					<h2 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4">Associated People/Businesses</h2>					<ul class="list-disc ml-6">						<li>{itemData.peopleAI || itemData.name || itemData.people || ''}</li>					</ul>					<hr class="my-6 border-gray-200 dark:border-gray-800" />					<h2 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4">Date</h2>					<p class="text-lg text-gray-700 dark:text-gray-300">						{itemData.startDate1							? `${new Date(itemData.startDate1 * 1000).toLocaleDateString()}`							: 'No start date available.'}						{itemData.endDate1 && itemData.endDate1 !== itemData.startDate1							? ` - ${new Date(itemData.endDate1 * 1000).toLocaleDateString()}`							: ''}					</p>					<!--					{peopleLinks.length > 0 ? (						<ul class="pb-2 list-disc ml-6">							{peopleLinks.map(({ name, slug }) => (								<li key={slug}>									<a										href={`/geography/${slug}`}										class="text-blue-600 hover:underline"									>										{name}									</a>								</li>							))}						</ul>					) : (						<p class="text-gray-600 dark:text-gray-400">No information available.</p>					)}-->					<hr class="my-6 border-gray-200 dark:border-gray-800" />					<h2 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4">Geography</h2>					{geoLinks.length > 0 ? (						<ul class="list-disc ml-6">							{geoLinks.map(({ name, slug }) => (								<li key={slug}>									<a										href={`/geography/${slug}`}										class="text-blue-600 hover:underline"									>										{name}									</a>								</li>							))}						</ul>					) : (						<p class="text-gray-600 dark:text-gray-400">No geographic information available.</p>					)}					<hr class="my-6 border-gray-200 dark:border-gray-800" />					<!-- Subjects Section -->					<h2 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4">Subjects</h2>					{subjectLinks.length > 0 ? (						<ul class="list-disc ml-6">							{subjectLinks.map(({ name, slug }) => (								<li key={slug}>									<a										href={`/subject/${slug}`}										class="text-blue-600 hover:underline"									>										{name}									</a>								</li>							))}						</ul>					) : (						<p class="text-gray-600 dark:text-gray-400">No subjects available.</p>					)}				</div>			</div>		</div>	</section></BaseLayout>