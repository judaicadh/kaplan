---
import FavoritesButton from "../../components/Misc/FavoritesButton";
export const prerender = true;

import BaseLayout from '../../layouts/BaseLayout.astro'
import items from '../../data/items.json'
import { slugify } from '../../utils/slugify.js'

// Build unique paths
export async function getStaticPaths() {
	const geographySlugs = items.flatMap((item) =>
		(item.geography || []).map((geo) => ({ params: { slug: slugify(geo.name) } }))
	);
	const uniquePaths = Array.from(new Set(geographySlugs.map((p) => JSON.stringify(p)))).map(JSON.parse);
	return uniquePaths;
}

const { slug } = Astro.params;

// Find the geography by slug
const geographyData = items
	.flatMap((item) => item.geography || [])
	.find((geo) => slugify(geo.name) === slug);

if (!geographyData) {
	throw new Error(`Geography with slug "${slug}" not found.`);
}

const { name: geographyName, uri } = geographyData;
if (!uri) {
	throw new Error(`No URI found for geography: ${geographyName}`);
}

// Items that include this geography
const associatedItems = items.filter((item) =>
	(item.geography || []).some((geo) => slugify(geo.name) === slug)
);

// URL + SEO text (set to your canonical host)
const CANON = 'https://www.kaplancollection.org';
const url = `${CANON}/geography/${slug}`;
const title = `Geography: ${geographyName} - Kaplan Collection of Early American Judaica`;
const metaDescription = `Explore resources related to ${geographyName} in the Kaplan Collection of Early American Judaica.`;

// JSON-LD
const jsonLdData = {
	"@context": "https://schema.org",
	"@type": "Place",
	name: geographyName,
	url,
	identifier: uri,
	description: metaDescription,
	mainEntityOfPage: url,
	publisher: {
		"@type": "Organization",
		name: "Judaica Digital Humanities at Penn Libraries and Kislak Center",
		url: "https://www.library.upenn.edu/kislak/judaicadh"
	}
};
---

<BaseLayout title={title} description={metaDescription}>
	<Fragment slot="headContent">
		<script type="application/ld+json" is:inline>{JSON.stringify(jsonLdData)}</script>
	</Fragment>

	<section class="py-6 sm:py-8 md:py-12 lg:py-16 bg-white dark:bg-gray-900 antialiased">
	<div class="max-w-screen-xl px-4 sm:px-6 lg:px-8 mx-auto">
	<h1 class="text-2xl sm:text-3xl font-semibold text-gray-900 dark:text-white mb-4">
	Geography: {geographyName}
	</h1>

	<hr class="my-6 border-gray-200 dark:border-gray-800" />

	<h2 class="text-xl font-bold mt-8">Associated Items</h2>
	<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 mt-6">
	{associatedItems.map((item) => (
		<div
		key={item.slug || item.objectID || item.title}
		class="p-4 border border-gray-200 rounded-lg shadow hover:shadow-lg transition"
			>
			<a href={`/item/${item.slug}`} class="block">
		{item.thumbnail ? (
				<img
				src={item.thumbnail}
			alt={item.title}
			class="w-full h-48 object-contain rounded-lg mb-4"
			/>
		) : (
		<div class="w-full h-48 bg-gray-200 dark:bg-gray-700 rounded-lg flex items-center justify-center text-gray-500">
		No Image
		</div>
		)}
		</a>
		<FavoritesButton
		client:only="react"
		objectID={item.objectID || item.slug || slug}
	title={item.title}
	slug={item.slug}  // link favorites back to the item, not the geography page
	thumbnail={item.thumbnail || '/default-thumbnail.jpg'}
	/>
		<a
		href={`/item/${item.slug}`}
	class="block text-blue-600 hover:underline text-lg font-semibold"
	>
	{item.title}
	</a>




	</div>
	))}
	</div>
	</div>
	</section>
	</BaseLayout>