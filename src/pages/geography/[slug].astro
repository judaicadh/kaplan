---
import BaseLayout from '../../layouts/BaseLayout.astro'
import items from '../../data/items.json'
import { slugify } from '../../utils/slugify.js'
import FavoritesButton from '../../components/Misc/FavoritesButton'
import BackToSearch from "../../components/Misc/BackToSearch";

// Build unique paths from geography names on items
export const prerender = true;
const nameOf = (g) => (typeof g === 'string' ? g : g?.name || '');

export async function getStaticPaths() {
	const seen = new Set();
	for (const item of items) {
		const geos = Array.isArray(item.geography) ? item.geography : [];
		for (const g of geos) {
			const nm = typeof g === 'string' ? g : (g && g.name) ? g.name : '';
			const s = nm ? slugify(nm) : '';
			if (s) seen.add(JSON.stringify({ params: { slug: s } }));
		}
	}
	return Array.from(seen).map((s) => JSON.parse(s));
}


const { slug } = Astro.params;
const uriOf  = (g) => (typeof g === 'object' ? g?.uri : undefined);

// Find the canonical geography object (first match wins)
// Prefer an entry with a URI if duplicates exist
const allGeos = items.flatMap((item) => item.geography || []);
const candidates = allGeos.filter((geo) => slugify(nameOf(geo)) === slug);
const geographyData = candidates.find((g) => typeof g === 'object' && g?.uri) || candidates[0];

if (!geographyData) {
	return new Response('Not Found', { status: 404 });
}

const geographyName = nameOf(geographyData);
const uri = typeof geographyData === 'object' ? geographyData?.uri : undefined;
// resolve canonical geography
const geography = candidates.find((g) => typeof g === 'object' && g?.uri) || candidates[0];
if (!geography) return new Response('Not Found', { status: 404 });

// Gather all items that include this geography (by slugged name)
const geoItems = items.filter((item) =>
	(item.geography || []).some((g) => slugify(nameOf(g)) === slug)
);
const authorityHref = uri
	? (uri.startsWith('http')
		? uri
		: `https://www.wikidata.org/wiki/${encodeURIComponent(uri)}`)
	: null;
// Basic SEO bits
const count = geoItems.length;

const geoName = nameOf(geography);
const sameAs  = uriOf(geography)
	? (uriOf(geography).startsWith('http') ? uriOf(geography) : `https://www.wikidata.org/wiki/${encodeURIComponent(uriOf(geography))}`)
	: undefined;
// Build a simple list of item URLs for JSON-LD ItemList
const CANON = 'https://kaplancollection.org'; // keep this consistent sitewide
const listUrls = geoItems.map((it) => {
	const s = it.slug || slugify(it.title);
	return `${CANON}/item/${encodeURIComponent(s)}`;
});

// ✅ Link to site graph + stable Place @id
const websiteId = `${CANON}#website`;
const orgId = `${CANON}#org`;
const placeId = `${CANON}/geography/${slug}#place`;
const pageGraph = [
	{
		"@type": "Place",
		"@id": placeId,
		name: geoName,
		url: `${CANON}/geography/${slug}`,
		isPartOf: { "@id": websiteId },
		...(sameAs ? { sameAs } : {})
	},
	{
		"@type": "ItemList",
		name: `Items related to ${geoName}`,
		numberOfItems: listUrls.length,
		itemListElement: listUrls.map((url, i) => ({ "@type": "ListItem", position: i + 1, url })),
		isPartOf: { "@id": websiteId }
	}
];

const description = listUrls.length
	? `Explore ${listUrls.length} item${listUrls.length===1?'':'s'} related to ${geoName}.`
	: `No items currently linked to ${geoName}.`;
---

<BaseLayout
	title={`${geoName} — Geography`}
	description={description}
	ogImage={geoItems[0]?.thumbnail}
	headGraph={pageGraph}
>
	<Fragment slot="headContent" />

	<section class="py-8 bg-white md:py-16 dark:bg-gray-900 antialiased">
		<div class="max-w-screen-xl px-4 mx-auto 2xl:px-0">

			<BackToSearch client:only="react" />

			<nav aria-label="Breadcrumb" class="text-sm text-gray-600 dark:text-gray-400 mb-4">
				<ol class="flex items-center gap-2">
					<li><a href="/" class="hover:underline focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 dark:text-blue-400">Home</a></li>
					<li aria-hidden="true">›</li>
					<li><a href="/search" class="hover:underline focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 dark:text-blue-400">Search</a></li>
					<li aria-hidden="true">›</li>
					<li class="text-gray-700 dark:text-gray-300" aria-current="page">{geographyName}</li>
				</ol>
			</nav>

			<header class="mb-6">
				<h1 class="text-2xl font-bold text-gray-900 sm:text-3xl dark:text-white flex items-center gap-3">
					{geographyName}
					{authorityHref && (
						<a
							href={authorityHref}
							target="_blank"
							rel="noopener noreferrer"
							class="text-sm font-medium text-blue-700 hover:underline dark:text-blue-400"
						>
							Authority record ↗
						</a>
					)}
				</h1>
				<p class="mt-2 text-gray-700 dark:text-gray-300">{description}</p>
			</header>

			{count === 0 ? (
				<p class="text-gray-600 dark:text-gray-400">No items available yet.</p>
			) : (
				<div
					class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6"
					role="list"
					aria-label={`Items related to ${geographyName}`}
				>
					{geoItems.map((it) => {
						const s = it.slug || slugify(it.title);
						return (
							<article key={s} class="group border border-gray-200 dark:border-gray-800 rounded-2xl overflow-hidden bg-white dark:bg-gray-800 shadow-sm hover:shadow-md transition" role="listitem">
								<a href={`/item/${s}`} class="block relative">
									<img
										src={it.thumbnail || '/default-thumbnail.jpg'}
										alt={it.title}
										class="w-full h-48 object-cover"
										loading="lazy"
										decoding="async"
									/>
								</a>
								<div class="p-4">
									<h2 class="text-base font-semibold text-gray-900 dark:text-white line-clamp-2">
										<a href={`/item/${s}`} class="hover:underline">{it.title}</a>
									</h2>

									{it.description && (
										<p class="mt-2 text-sm text-gray-600 dark:text-gray-400 line-clamp-3">{it.description}</p>
									)}

									<!-- Favorites inline (not on its own line) -->
									<div class="mt-3 flex items-center justify-between">
										<a href={`/item/${s}`} class="text-sm text-blue-700 hover:underline dark:text-blue-400">View item</a>
										<FavoritesButton
											client:only="react"
											objectID={it.objectID || it.slug || s}
											title={it.title}
											slug={s}
											thumbnail={it.thumbnail || '/default-thumbnail.jpg'}
											className="inline-flex items-center"
										/>
									</div>
								</div>
							</article>
						);
					})}
					</div>
					)}
					</div>
					</section>
					</BaseLayout>