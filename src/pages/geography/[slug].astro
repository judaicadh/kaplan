---
import items from '../../data/items.json'
import GeoLayout from '../../layouts/GeoLayout.astro'
import { slugify } from '../../utils/slugify.js'

// Generate dynamic paths based on slugified geography names
export async function getStaticPaths() {
	const geographyItems = items.flatMap((item) =>
		(item.geography || []).map((geo) => ({
			params: { slug: slugify(geo.name) }
		}))
	)

	const uniquePaths = Array.from(
		new Set(geographyItems.map((path) => JSON.stringify(path)))
	).map((path) => JSON.parse(path))

	return uniquePaths
}

// Extract the slug from the URL
const { slug } = Astro.params

// Find the corresponding geography data by matching the slug
const geographyData = items.flatMap((item) =>
	item.geography || []
).find((geo) => slugify(geo.name) === slug)

if (!geographyData) {
	throw new Error(`Geography with slug "${slug}" not found.`)
}

// Fetch additional data from Wikidata
let wikidataResult = null
try {
	const response = await fetch(`https://www.wikidata.org/wiki/Special:EntityData/${geographyData.uri.split('/').pop()}.json`)
	const wikidata = await response.json()
	const entity = wikidata.entities[geographyData.uri.split('/').pop()]

	wikidataResult = {
		label: entity.labels?.en?.value || geographyData.name,
		description: entity.descriptions?.en?.value || 'No description available.'
	}
} catch (error) {
	console.error('Error fetching data from Wikidata:', error)
}

// Filter items associated with this geography
const associatedItems = items.filter(
	(item) =>
		(item.geography || []).some(
			(geo) => slugify(geo.name) === slug
		)
)
---

<GeoLayout title={wikidataResult?.label || 'Geography'}>
	<section class="py-8 bg-white md:py-16 dark:bg-gray-900 antialiased">
		<div class="max-w-screen-xl px-4 mx-auto 2xl:px-0">
			<div class="prose dark:prose-invert">
				<!-- Page Header -->
				<h1 class="text-2xl font-bold text-gray-900 sm:text-3xl dark:text-white">
					{wikidataResult?.label || geographyData.name || 'Geography not found'}
				</h1>
				<hr class="my-6 border-gray-200 dark:border-gray-800" />

				<!-- Description Section -->
				{wikidataResult?.description ? (
					<p class="text-lg text-gray-700 dark:text-gray-300">
						{wikidataResult.description}
					</p>
				) : (
					<p class="text-gray-600 dark:text-gray-400">No description available.</p>
				)}

				<!-- Associated Items Section -->
				{associatedItems.length > 0 ? (
					<>
						<h2 class="text-2xl font-bold mt-8">Associated Items</h2>
						<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 mt-4">
							{associatedItems.map((item) => (
								<div class="border rounded-lg overflow-hidden">
									<a href={`/item/${item.slug}`}>
										<img
											src={item.thumbnail}
											alt={item.title}
											class="w-full h-48 object-cover"
										/>
										<div class="p-4">
											<p class="font-semibold">{item.title}</p>
										</div>
									</a>
								</div>
							))}
						</div>
					</>
				) : (
					<p>No associated items found.</p>
				)}

				<!-- Back Link -->
				<div class="mt-6">
					<a
						href="/geography"
						class="text-blue-600 hover:underline"
					>
						Back to Geographies
					</a>
				</div>
			</div>
		</div>
	</section>
</GeoLayout>